[{"C:\\HW\\Music\\project\\app\\src\\index.js":"1","C:\\HW\\Music\\project\\app\\src\\App.js":"2","C:\\HW\\Music\\project\\app\\src\\reportWebVitals.js":"3","C:\\HW\\Music\\project\\app\\src\\Components\\utilities.js":"4","C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\GeneticPart.js":"5","C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\InputsToAlgorithm\\SynthInputs.js":"6","C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\InputsToAlgorithm\\FitnessInputs.js":"7","C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\geneticAlgorithm.js":"8","C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\InputsToAlgorithm\\InitialInputs.js":"9","C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\InputsToAlgorithm\\MateInputs.js":"10","C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\InputsToAlgorithm\\MutateInputs.js":"11","C:\\HW\\Music\\project\\app\\src\\Components\\LooperPart\\MainLoop.js":"12","C:\\HW\\Music\\project\\app\\src\\Components\\LooperPart\\MainLoopPoly.js":"13","C:\\HW\\Music\\project\\app\\src\\Components\\Piano\\Pianorecorder.js":"14","C:\\HW\\Music\\project\\app\\src\\Components\\Piano\\DimensionsProvider.js":"15","C:\\HW\\Music\\project\\app\\src\\Components\\Piano\\PianoWithRecording.js":"16","C:\\HW\\Music\\project\\app\\src\\Components\\Piano\\SoundfontProvider.js":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":759,"mtime":1610821797593,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":1272,"mtime":1610662751052,"results":"22","hashOfConfig":"19"},{"size":4506,"mtime":1610810397807,"results":"23","hashOfConfig":"19"},{"size":1044,"mtime":1610583242388,"results":"24","hashOfConfig":"19"},{"size":1117,"mtime":1610639016122,"results":"25","hashOfConfig":"19"},{"size":8944,"mtime":1610651956908,"results":"26","hashOfConfig":"19"},{"size":3737,"mtime":1610629855647,"results":"27","hashOfConfig":"19"},{"size":710,"mtime":1610639520040,"results":"28","hashOfConfig":"19"},{"size":1439,"mtime":1610649852840,"results":"29","hashOfConfig":"19"},{"size":4089,"mtime":1610662903870,"results":"30","hashOfConfig":"19"},{"size":3273,"mtime":1610663242233,"results":"31","hashOfConfig":"19"},{"size":4177,"mtime":1610824628401,"results":"32","hashOfConfig":"19"},{"size":387,"mtime":1610809216522,"results":"33","hashOfConfig":"19"},{"size":1854,"mtime":1610810196404,"results":"34","hashOfConfig":"19"},{"size":2921,"mtime":1610809599730,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"r5tcet",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\HW\\Music\\project\\app\\src\\index.js",[],["77","78"],"C:\\HW\\Music\\project\\app\\src\\App.js",[],"C:\\HW\\Music\\project\\app\\src\\reportWebVitals.js",[],"C:\\HW\\Music\\project\\app\\src\\Components\\utilities.js",["79","80"],"import { Tone } from \"tone/build/esm/core/Tone\";\r\n\r\nexport const ColoredLineBig = ({ color }) => (\r\n  <hr\r\n    style={{\r\n      color: color,\r\n      backgroundColor: color,\r\n      height: 5,\r\n    }}\r\n  />\r\n);\r\n\r\nexport const ColoredLineSmall = ({ color }) => (\r\n  <hr\r\n    style={{\r\n      color: color,\r\n      backgroundColor: color,\r\n      height: 2,\r\n    }}\r\n  />\r\n);\r\n\r\n/**\r\n * Returns a random integer between min (inclusive) and max (inclusive).\r\n * The value is no lower than min (or the next integer greater than min\r\n * if min isn't an integer) and no greater than max (or the next integer\r\n * lower than max if max isn't an integer).\r\n * Using Math.round() will give you a non-uniform distribution!\r\n */\r\nexport function getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function customLog(message, color = \"black\") {\r\n  switch (color) {\r\n    case \"success\":\r\n      color = \"Green\";\r\n      break;\r\n    case \"info\":\r\n      color = \"Blue\";\r\n      break;\r\n    case \"error\":\r\n      color = \"Red\";\r\n      break;\r\n    case \"warning\":\r\n      color = \"Orange\";\r\n      break;\r\n    default:\r\n      color = color;\r\n  }\r\n\r\n  console.log(`%c${message}`, `color:${color}`);\r\n}\r\n","C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\GeneticPart.js",["81","82","83"],"import React, { useState } from \"react\";\r\n\r\nimport * as Tone from \"tone\";\r\nimport Population from \"./geneticAlgorithm\";\r\n\r\n// import Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {\r\n  SynthInputs,\r\n  defaultSynthInputs,\r\n} from \"./InputsToAlgorithm/SynthInputs\";\r\nimport {\r\n  InitInputs,\r\n  defaultPopulationInputs,\r\n} from \"./InputsToAlgorithm/InitialInputs\";\r\nimport {\r\n  FitnessInputs,\r\n  defaultFitnessInput,\r\n} from \"./InputsToAlgorithm/FitnessInputs\";\r\nimport { MateInputs, defaultMateInput } from \"./InputsToAlgorithm/MateInputs\";\r\nimport {\r\n  MutateInputs,\r\n  defalutMutateInput,\r\n} from \"./InputsToAlgorithm/MutateInputs\";\r\n\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nexport function GenPart() {\r\n  const [initialPopulationInputs, setInitialPopulationInputs] = useState(\r\n    defaultPopulationInputs\r\n  );\r\n  const [fitnessInput, setFitnessInput] = useState(defaultFitnessInput);\r\n  const [mateInput, setMateInput] = useState(defaultMateInput);\r\n  const [mutateInput, setMutateInput] = useState(defalutMutateInput);\r\n\r\n  //starting notes length is 16\r\n  const [inputToAlgo, setInputToAlgo] = useState([\r\n    60,\r\n    62,\r\n    63,\r\n    64,\r\n    65,\r\n    66,\r\n    60,\r\n    66,\r\n    62,\r\n  ]);\r\n\r\n  // goal,\r\n  // initialPopulationInputs,\r\n  //\r\n  function GoGenetic() {\r\n    console.log(\r\n      \"%c Clicked on Play! here are settings... \",\r\n      \"background: #222; color: #bada55\"\r\n    );\r\n    console.log(\"initialPopulationInputs -> \", initialPopulationInputs);\r\n    console.log(\"fitnessInput -> \", fitnessInput);\r\n    console.log(\"mateInput -> \", mateInput);\r\n    console.log(\"mutateInput -> \", mutateInput);\r\n    console.log(\"\");\r\n    console.log(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\");\r\n    console.log(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\");\r\n    console.log(\"\");\r\n\r\n    let myPopulation = new Population(\r\n      inputToAlgo,\r\n      initialPopulationInputs,\r\n      fitnessInput,\r\n      mateInput,\r\n      mutateInput\r\n    );\r\n    TrainPopulation(initialPopulationInputs.numberGeneration, myPopulation);\r\n\r\n\r\n    let lastGenMemberItems = myPopulation.members[0].items;\r\n    console.log(\"playing outPut -> \", lastGenMemberItems);\r\n    playSequence(lastGenMemberItems);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>Gentic Algorithm</h3>\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"row\"\r\n        // p={1}\r\n        // m={1}\r\n        justifyContent=\"space-around\"\r\n      >\r\n        <div>\r\n          {\" \"}\r\n          <Box component=\"span\" p={1}>\r\n            {/* <SynthInputs setSynthInput={setSynthInputs} /> */}\r\n          </Box>\r\n          <Box component=\"span\" p={1}>\r\n            <InitInputs\r\n              setInitialPopulationInput={setInitialPopulationInputs}\r\n            />\r\n          </Box>{\" \"}\r\n        </div>\r\n        <div>\r\n          {\" \"}\r\n          <Box component=\"span\" p={1}>\r\n            <FitnessInputs setFitnessInput={setFitnessInput} />\r\n          </Box>{\" \"}\r\n        </div>\r\n        <div>\r\n          {\" \"}\r\n          <Box component=\"span\" p={1}>\r\n            <MateInputs setMateInput={setMateInput} />\r\n          </Box>{\" \"}\r\n          <Box component=\"span\" p={1}>\r\n            <MutateInputs setMutateInput={setMutateInput} />\r\n          </Box>{\" \"}\r\n        </div>\r\n      </Box>\r\n\r\n      <Button onClick={() => GoGenetic()}>\r\n        {/* <Button onClick={() => createGenerations(inputToAlgo, numGeneraions)}> */}{\" \"}\r\n        Play{\" \"}\r\n      </Button>\r\n      <Button onClick>SaveProfile</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TrainPopulation(numberGeneration, population) {\r\n  for (let i = 0; i < numberGeneration; i++) {\r\n    population.generation();\r\n  }\r\n}\r\n\r\nfunction getMidiNote(freq) {\r\n  return Tone.Frequency(freq, \"midi\").toNote();\r\n}\r\n\r\nfunction playSequence(sequence) {\r\n  const synth = new Tone.PolySynth().toDestination();\r\n  const now = Tone.now();\r\n  let d = 0.5;\r\n\r\n  for (let i = 0; i < sequence.length; i++) {\r\n    let x = i % 3;\r\n    switch (x) {\r\n      case 1:\r\n        synth.triggerAttackRelease(\r\n          [getMidiNote(sequence[i])],\r\n          \"4n\",\r\n          now + i * d\r\n        );\r\n        break;\r\n\r\n      case 2:\r\n        synth.triggerAttackRelease(\r\n          [getMidiNote(sequence[i])],\r\n          \"8n\",\r\n          now + i * d\r\n        );\r\n        break;\r\n\r\n      default:\r\n        synth.triggerAttackRelease(\r\n          [getMidiNote(sequence[i])],\r\n          \"2n\",\r\n          now + i * d\r\n        );\r\n        break;\r\n    }\r\n  }\r\n}\r\n","C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\InputsToAlgorithm\\SynthInputs.js",["84"],"import React, { useState } from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nexport const defaultSynthInputs = { synthType: \"FMSynth\" };\r\n\r\nexport function SynthInputs(props) {\r\n  const [synthType, setSynthType] = useState(\"FMSynth\");\r\n  let MySynthType = (\r\n    <div>\r\n      <Box>\r\n        <input\r\n          type=\"radio\"\r\n          value=\"FMSynth\"\r\n          name=\"typeOfSynth\"\r\n          onChange={(e) => setSynthType(e.target.value)}\r\n        />{\" \"}\r\n        FMSynth\r\n      </Box>\r\n\r\n      <Box>\r\n        <input\r\n          type=\"radio\"\r\n          value=\"AMSynth\"\r\n          name=\"typeOfSynth\"\r\n          onChange={(e) => setSynthType(e.target.value)}\r\n        />{\" \"}\r\n        AMSynth\r\n      </Box>\r\n    </div>\r\n  );\r\n\r\n  // props.setSynthInput({ synthType: synthType });\r\n\r\n  return (\r\n    <div>\r\n      <h5>Synth</h5>\r\n      {/* <Box>{MySynthType}</Box> */}\r\n      <button\r\n        onClick={() => {\r\n          props.setSynthInput({ synthType: synthType });\r\n        }}\r\n      >\r\n        Set\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\InputsToAlgorithm\\FitnessInputs.js",[],"C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\geneticAlgorithm.js",["85"],"import { getRandomInt, customLog } from \"./../utilities\";\r\n\r\n/*\r\n    sequence            // the part we eighther initialize randomly, or y sampling a givven input\r\n    items,              // the items that are being trained.. (output for each Gene)\r\n    geneItemsLength,    // the length of the items attribute\r\n    fitnessInput,       // {\r\n                              defaultcost:        // setting a cost of a Gene by default value\r\n                              defaultPropability: // the propability to do so (otherwise we go normal fittness)\r\n                           }\r\n    mateInput,          //{\r\n                             mateNumber: number of new chiuldren to create,\r\n                          }\r\n    mutateInput         //{\r\n                              mutateProp: the propability to mutate a specific Gene\r\n                              mutateNotesConst: if mutating - mutate to a note from this array \r\n                          }   \r\n*/\r\nclass Gene {\r\n  constructor(\r\n    sequence,\r\n    items,\r\n    geneItemsLength,\r\n    fitnessInput,\r\n    mateInput,\r\n    mutateInput\r\n  ) {\r\n    this.sequence = sequence;\r\n    this.cost = 999999;\r\n    this.items = items;\r\n    this.fitnessInput = fitnessInput;\r\n    this.mateInput = mateInput;\r\n    this.mutateInput = mutateInput;\r\n    this.geneItemsLength = geneItemsLength;\r\n  }\r\n\r\n  //at random Method,\r\n  //we initialize all new Genese being constructed at the constructor of POPULATION\r\n  //this method constract the ITEMS for each new Gen we build at very first initialization of population\r\n  //for each new Gen, construct its ITEMS field to be a fixed starting array, at the givvern length size\r\n  random() {\r\n    let length = this.geneItemsLength;\r\n    while (length--) {\r\n      //random index of sequence field (the inital array givven for this Gene)\r\n      let rand = Math.floor(Math.random() * this.sequence.length);\r\n\r\n      //setting this gene Items at the size of desired length\r\n      this.items.push(this.sequence[rand]);\r\n    }\r\n  }\r\n\r\n  mutate() {\r\n    let chanceToMutate = this.mutateInput.mutateProp;\r\n    if (Math.random() > chanceToMutate) return;\r\n\r\n    var index = Math.floor(Math.random() * this.items.length);\r\n    var mutateItem = this.getRandomNoteFromGivvenArray(\r\n      this.mutateInput.mutateNotesConst\r\n    );\r\n    var newItem = [];\r\n    for (let i = 0; i < this.items.length; i++) {\r\n      if (i === index) newItem.push(mutateItem);\r\n      else newItem.push(this.items[i]);\r\n    }\r\n    this.items = newItem;\r\n  }\r\n\r\n  getRandomNoteFromGivvenArray(notesArray) {\r\n    return notesArray[getRandomInt(0, notesArray.length - 1)];\r\n  }\r\n\r\n  crossOver(otheGene) {\r\n    let numOfNewKids = this.mateInput.mateNumber;\r\n    let kids = [];\r\n\r\n    for (let i = 0; i < numOfNewKids; i++) {\r\n      var pivot = Math.round(this.items.length / 2) - 1;\r\n      let temp = this.items.slice(0, pivot).concat(otheGene.items.slice(pivot));\r\n      kids.push(\r\n        new Gene(\r\n          this.sequence,\r\n          temp,\r\n          this.geneItemsLength,\r\n          this.fitnessInput,\r\n          this.mateInput,\r\n          this.mutateInput\r\n        )\r\n      );\r\n    }\r\n    return kids;\r\n  }\r\n\r\n  fitness(comparableItem) {\r\n    var total = 0;\r\n    for (let i = 0; i < this.items.length; i++) {\r\n      total +=\r\n        (this.items[i] - comparableItem[i]) *\r\n        (this.items[i] - comparableItem[i]);\r\n    }\r\n\r\n    if (Math.random() < this.fitnessInput.defaultCostPropability) {\r\n      this.cost = this.fitnessInput.defaultcost;\r\n    } else this.cost = total;\r\n  }\r\n}\r\n\r\n/*\r\ngiven size is length is input devided by 4\r\nconst initialPopulationInputs  {\r\n      initalPoulationRandom: boolean,                 // start first population with random notes\r\n      minRandomValue: number, maxRandomValue: number, // if YES random -> MIDI values range to generate  \r\n\r\n      populationSize: number,                         // Population size\r\n      numberGeneration: number,                       // Number of generation\r\n\r\n      sizeOfSequenceOfGens: number,                   // how many cells to get at var Gene.sequence\r\n      geneItemsLength :number                          //the length of items Array (Length of output)\r\n                           }\r\n*/\r\nclass Population {\r\n  constructor(\r\n    goal,\r\n    initialPopulationInputs,\r\n    fitnessInput,\r\n    mateInput,\r\n    mutateInput\r\n  ) {\r\n    this.members = [];\r\n    this.goal = goal;\r\n    this.generationNumber = 0;\r\n    this.mateInput = mateInput;\r\n    this.mutateInput = mutateInput;\r\n\r\n    if (initialPopulationInputs.initalPoulationRandom === \"true\") {\r\n      this.setUpRandomPoulation(\r\n        goal,\r\n        initialPopulationInputs,\r\n        fitnessInput,\r\n        mateInput,\r\n        mutateInput\r\n      );\r\n    } else {\r\n      this.setUpPopulationFromGoal(\r\n        goal,\r\n        initialPopulationInputs,\r\n        fitnessInput,\r\n        mateInput,\r\n        mutateInput\r\n      );\r\n    }\r\n  }\r\n  setUpPopulationFromGoal(\r\n    goal,\r\n    initialPopulationInputs,\r\n    fitnessInput,\r\n    mateInput,\r\n    mutateInput\r\n  ) {\r\n    let populationSize = initialPopulationInputs.populationSize;\r\n\r\n    let geneSequenceLength = initialPopulationInputs.geneSequenceLength;\r\n\r\n    while (populationSize > 0) {\r\n      let { index1, index2 } = this.getRandomRange(\r\n        geneSequenceLength,\r\n        goal.length\r\n      );\r\n\r\n      let sequece = goal.slice(index1, index2);\r\n      let geneItemsLength = initialPopulationInputs.geneItemsLength;\r\n      var gene = new Gene(\r\n        sequece,\r\n        [],\r\n        geneItemsLength,\r\n        fitnessInput,\r\n        mateInput,\r\n        mutateInput\r\n      );\r\n      gene.random();\r\n      this.members.push(gene);\r\n      populationSize -= 1;\r\n    }\r\n  }\r\n\r\n  setUpRandomPoulation(\r\n    goal,\r\n    initialPopulationInputs,\r\n    fitnessInput,\r\n    mateInput,\r\n    mutateInput\r\n  ) {\r\n    let populationSize = initialPopulationInputs.populationSize;\r\n    while (populationSize > 0) {\r\n      let newMember = this.getRandomMember(\r\n        initialPopulationInputs.minRandomValue,\r\n        initialPopulationInputs.maxRandomValue,\r\n        initialPopulationInputs.sizeOfSequenceOfGens\r\n      );\r\n      let temp = new Gene(\r\n        newMember,\r\n        [],\r\n        initialPopulationInputs.geneItemsLength,\r\n        fitnessInput,\r\n        mateInput,\r\n        mutateInput\r\n      );\r\n\r\n      temp.random();\r\n      this.members.push(temp);\r\n\r\n      populationSize -= 1;\r\n    }\r\n  }\r\n\r\n  getRandomRange(geneSequenceLength, goalLength) {\r\n    if (geneSequenceLength === goalLength)\r\n      return { index1: 0, index2: goalLength - 1 };\r\n\r\n    let ok = true;\r\n\r\n    if (geneSequenceLength < goalLength) {\r\n      while (ok) {\r\n        let index1 = getRandomInt(0, goalLength - 1);\r\n        if (index1 + geneSequenceLength <= goalLength) {\r\n          return { index1: index1, index2: index1 + geneSequenceLength };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getRandomMember(min, max, sizeOfSequenceOfGens) {\r\n    let newMember = [];\r\n    let index = sizeOfSequenceOfGens;\r\n    while (index > 0) {\r\n      newMember.push(this.getRandomInt(Number(min), Number(max)));\r\n      index -= 1;\r\n    }\r\n\r\n    return newMember;\r\n  }\r\n\r\n  sortMembersByCost() {\r\n    // array of objects\r\n    this.members.sort(function (a, b) {\r\n      return a.cost - b.cost;\r\n    });\r\n  }\r\n\r\n  generation() {\r\n    //for each member calculating it fittness value\r\n    for (let i = 0; i < this.members.length; i++) {\r\n      this.members[i].fitness(this.goal);\r\n    }\r\n\r\n    //Sorts the members by their costs..\r\n    this.sortMembersByCost();\r\n    // this.printProcess();\r\n\r\n    //after sorting the array\r\n    //taking the two \"best\" scores\r\n    var childrens = this.members[0].crossOver(this.members[1]);\r\n    let numOfNewKids = this.mateInput.mateNumber;\r\n\r\n    // we delete last numOfNewKids not imporatant members,\r\n    //And instead putting all the new kids we just created\r\n    this.members.splice(\r\n      this.members.length - numOfNewKids,\r\n      numOfNewKids,\r\n      ...childrens\r\n    );\r\n\r\n    //looping at all members, mutating\r\n    for (let i = 0; i < this.members.length; i++) {\r\n      //creating mutations\r\n      this.members[i].mutate();\r\n      //refiitting\r\n      this.members[i].fitness(this.goal);\r\n\r\n      //! QUESTION\r\n      //! Y THE ALGO WONT CONVERGE TO GOAL?\r\n      if (this.members[i].items === this.goal) {\r\n        //Entered here when reached a perfect shot at givven goal.\r\n        //so we sort this generation (cause its good)\r\n        //returning the 1 with best\r\n        this.sortMembersByCost();\r\n        // this.printProcess();\r\n        return true;\r\n      }\r\n    }\r\n    this.generationNumber++;\r\n  }\r\n\r\n  printProcess() {\r\n    console.log(\"Generation:\", this.generationNumber);\r\n    for (var i = 0; i < this.members.length; i++) {\r\n      console.log(\r\n        \"Item:\",\r\n        this.members[i].items,\r\n        \", Cost:\",\r\n        this.members[i].cost\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Population;\r\n","C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\InputsToAlgorithm\\InitialInputs.js",[],["86","87"],"C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\InputsToAlgorithm\\MateInputs.js",[],"C:\\HW\\Music\\project\\app\\src\\Components\\GenPart\\InputsToAlgorithm\\MutateInputs.js",[],"C:\\HW\\Music\\project\\app\\src\\Components\\LooperPart\\MainLoop.js",[],"C:\\HW\\Music\\project\\app\\src\\Components\\LooperPart\\MainLoopPoly.js",[],"C:\\HW\\Music\\project\\app\\src\\Components\\Piano\\Pianorecorder.js",["88","89","90"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport _ from \"lodash\";\nimport { Piano, KeyboardShortcuts, MidiNumbers } from \"react-piano\";\nimport \"react-piano/dist/styles.css\";\n\nimport DimensionsProvider from \"./DimensionsProvider\";\nimport SoundfontProvider from \"./SoundfontProvider\";\nimport PianoWithRecording from \"./PianoWithRecording\";\n\n// webkitAudioContext fallback needed to support Safari\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nconst soundfontHostname = \"https://d1pzp51pvbm36p.cloudfront.net\";\n\nconst noteRange = {\n  first: MidiNumbers.fromNote(\"c3\"),\n  last: MidiNumbers.fromNote(\"f4\"),\n};\nconst keyboardShortcuts = KeyboardShortcuts.create({\n  firstNote: noteRange.first,\n  lastNote: noteRange.last,\n  keyboardConfig: KeyboardShortcuts.HOME_ROW,\n});\n\nexport default class PianoMan extends React.Component {\n  state = {\n    recording: {\n      mode: \"RECORDING\",\n      events: [],\n      currentTime: 0,\n      currentEvents: [],\n    },\n    displayer: undefined,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.scheduledEvents = [];\n  }\n\n  getRecordingEndTime = () => {\n    if (this.state.recording.events.length === 0) {\n      return 0;\n    }\n    return Math.max(\n      ...this.state.recording.events.map((event) => event.time + event.duration)\n    );\n  };\n\n  getDisplayer = (events) => {\n    return events.map((item) => {\n      return (\n        <div>\n          <label>Midi {item.midiNumber} </label>\n          <label>Time {item.time}</label>\n        </div>\n      );\n    });\n  };\n\n  setRecording = (value) => {\n    this.setState({\n      recording: Object.assign({}, this.state.recording, value),\n    });\n\n    if (value.events) {\n      this.setState({\n        displayer: this.getDisplayer(value.events),\n      });\n    }\n  };\n\n  onClickPlay = () => {\n    this.setRecording({\n      mode: \"PLAYING\",\n    });\n    const startAndEndTimes = _.uniq(\n      _.flatMap(this.state.recording.events, (event) => [\n        event.time,\n        event.time + event.duration,\n      ])\n    );\n    startAndEndTimes.forEach((time) => {\n      this.scheduledEvents.push(\n        setTimeout(() => {\n          const currentEvents = this.state.recording.events.filter((event) => {\n            return event.time <= time && event.time + event.duration > time;\n          });\n          this.setRecording({\n            currentEvents,\n          });\n        }, time * 1000)\n      );\n    });\n    // Stop at the end\n    setTimeout(() => {\n      this.onClickStop();\n    }, this.getRecordingEndTime() * 1000);\n  };\n\n  onClickStop = () => {\n    this.scheduledEvents.forEach((scheduledEvent) => {\n      clearTimeout(scheduledEvent);\n    });\n    this.setRecording({\n      mode: \"RECORDING\",\n      currentEvents: [],\n    });\n  };\n\n  onClickClear = () => {\n    this.onClickStop();\n    this.setRecording({\n      events: [],\n      mode: \"RECORDING\",\n      currentEvents: [],\n      currentTime: 0,\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ marginLeft: \"200px\" }}>\n        <h1 className=\"h3\">react-piano recording + playback demo</h1>\n        <div className=\"mt-5\">\n          <SoundfontProvider\n            instrumentName=\"acoustic_grand_piano\"\n            audioContext={audioContext}\n            hostname={soundfontHostname}\n            render={({ isLoading, playNote, stopNote }) => (\n              <PianoWithRecording\n                recording={this.state.recording}\n                setRecording={this.setRecording}\n                noteRange={noteRange}\n                width={800}\n                playNote={playNote}\n                stopNote={stopNote}\n                disabled={isLoading}\n                keyboardShortcuts={keyboardShortcuts}\n              />\n            )}\n          />\n        </div>\n        <div className=\"mt-5\">\n          <button onClick={this.onClickPlay}>Play</button>\n          <button onClick={this.onClickStop}>Stop</button>\n          <button onClick={this.onClickClear}>Clear</button>\n        </div>\n        <div className=\"mt-5\">\n          <strong>Recorded notes</strong>\n          {/* <div>{JSON.stringify(helper)}</div> */}\n          {this.state.displayer}\n        </div>\n      </div>\n    );\n  }\n}\n","C:\\HW\\Music\\project\\app\\src\\Components\\Piano\\DimensionsProvider.js",[],"C:\\HW\\Music\\project\\app\\src\\Components\\Piano\\PianoWithRecording.js",[],"C:\\HW\\Music\\project\\app\\src\\Components\\Piano\\SoundfontProvider.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":1,"column":10,"nodeType":"97","messageId":"98","endLine":1,"endColumn":14},{"ruleId":"99","severity":1,"message":"100","line":51,"column":15,"nodeType":"97","messageId":"101","endLine":51,"endColumn":20},{"ruleId":"95","severity":1,"message":"102","line":9,"column":3,"nodeType":"97","messageId":"98","endLine":9,"endColumn":14},{"ruleId":"95","severity":1,"message":"103","line":10,"column":3,"nodeType":"97","messageId":"98","endLine":10,"endColumn":21},{"ruleId":"95","severity":1,"message":"104","line":37,"column":23,"nodeType":"97","messageId":"98","endLine":37,"endColumn":37},{"ruleId":"95","severity":1,"message":"105","line":8,"column":7,"nodeType":"97","messageId":"98","endLine":8,"endColumn":18},{"ruleId":"95","severity":1,"message":"106","line":1,"column":24,"nodeType":"97","messageId":"98","endLine":1,"endColumn":33},{"ruleId":"91","replacedBy":"107"},{"ruleId":"93","replacedBy":"108"},{"ruleId":"95","severity":1,"message":"109","line":2,"column":8,"nodeType":"97","messageId":"98","endLine":2,"endColumn":16},{"ruleId":"95","severity":1,"message":"110","line":4,"column":10,"nodeType":"97","messageId":"98","endLine":4,"endColumn":15},{"ruleId":"95","severity":1,"message":"111","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":26},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'Tone' is defined but never used.","Identifier","unusedVar","no-self-assign","'color' is assigned to itself.","selfAssignment","'SynthInputs' is defined but never used.","'defaultSynthInputs' is defined but never used.","'setInputToAlgo' is assigned a value but never used.","'MySynthType' is assigned a value but never used.","'customLog' is defined but never used.",["112"],["113"],"'ReactDOM' is defined but never used.","'Piano' is defined but never used.","'DimensionsProvider' is defined but never used.","no-global-assign","no-unsafe-negation"]